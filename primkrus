#include <iostream>
using namespace std;

// Function to find the vertex with the minimum key value
int minKey(int key[], bool mstSet[], int V) {
    int min = 99999, min_index;

    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the constructed MST
void printMST(int parent[], int graph[][100], int V) {
    cout << "The Minimum Spanning Tree (MST) for the college campus is:\n";
    cout << "Departments Connected\tDistance\n";
    for (int i = 1; i < V; i++) {
        cout << "Department " << parent[i] + 1 << " - Department " << i + 1
             << "\t\t" << graph[i][parent[i]] << " meters\n";
    }
}

// Function to implement Prim's Algorithm
void primMST(int graph[][100], int V) {
    int parent[V];    // Stores the MST
    int key[V];       // Stores the minimum weights
    bool mstSet[V];   // Whether a vertex is included in MST

    // Initialize all keys as infinite and mstSet as false
    for (int i = 0; i < V; i++) {
        key[i] = 99999;
        mstSet[i] = false;
    }

    key[0] = 0;       // Start from the first department
    parent[0] = -1;   // First node is always root of MST

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent, graph, V);
}

int main() {
    int V;
    cout << "Enter the number of departments: ";
    cin >> V;

    int graph[100][100]; // Adjacency matrix (max 100 departments)

    cout << "Enter the adjacency matrix representing distances between departments (0 if no direct connection):\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    cout << "\nFinding the Minimum Spanning Tree for the college campus...\n";
    primMST(graph, V);

    return 0;
}
